
out:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000144  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  000001e2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000055  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000010b  00000000  00000000  00000257  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000b3  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000c5  00000000  00000000  00000415  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000a1  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000080  00000000  00000000  000005ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  c6:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Fnd_Display>:
	}
    	
  }
}

void Fnd_Display(int fnd_sel, int num) {
  ce:	fb 01       	movw	r30, r22

  if(fnd_sel == 1) fnd_sel_data = 0x08;
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	91 05       	cpc	r25, r1
  d4:	19 f4       	brne	.+6      	; 0xdc <Fnd_Display+0xe>
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	10 c0       	rjmp	.+32     	; 0xfc <Fnd_Display+0x2e>
  else if(fnd_sel == 2) fnd_sel_data = 0x04;
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	91 05       	cpc	r25, r1
  e0:	19 f4       	brne	.+6      	; 0xe8 <Fnd_Display+0x1a>
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0a c0       	rjmp	.+20     	; 0xfc <Fnd_Display+0x2e>
  else if(fnd_sel == 3) fnd_sel_data = 0x02;
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	91 05       	cpc	r25, r1
  ec:	19 f4       	brne	.+6      	; 0xf4 <Fnd_Display+0x26>
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <Fnd_Display+0x2e>
  else if(fnd_sel == 4) fnd_sel_data = 0x01;
  f4:	04 97       	sbiw	r24, 0x04	; 4
  f6:	31 f4       	brne	.+12     	; 0x104 <Fnd_Display+0x36>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 0d 01 	sts	0x010D, r25
 100:	80 93 0c 01 	sts	0x010C, r24
PORTD = fnd_sel_data;
 104:	80 91 0c 01 	lds	r24, 0x010C
 108:	82 bb       	out	0x12, r24	; 18
PORTB = fnd_num[num];
 10a:	e0 50       	subi	r30, 0x00	; 0
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	80 81       	ld	r24, Z
 110:	88 bb       	out	0x18, r24	; 24
}
 112:	08 95       	ret

00000114 <main>:
int fnd_data = 0; //FND 표시할 숫자 정하기

void Fnd_Display(int fnd_sel, int num); //FND Display 함수

int main(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
  int i=0;
  DDRB = 0xff; //포트 설정
 118:	9f ef       	ldi	r25, 0xFF	; 255
 11a:	97 bb       	out	0x17, r25	; 23
  DDRD = 0x0f;
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	81 bb       	out	0x11, r24	; 17
  DDRA = 0xff;
 120:	9a bb       	out	0x1a, r25	; 26
  PORTA = 0xff;
 122:	9b bb       	out	0x1b, r25	; 27
 124:	c1 e0       	ldi	r28, 0x01	; 1
 126:	d0 e0       	ldi	r29, 0x00	; 0

  while (1)
  {
  	for(i = 1 ; i<9 ; i++) {
	  Fnd_Display(i,fnd_data); //함수 호출 “1번째 자리에 fnd_data 값 출력”
 128:	60 91 0a 01 	lds	r22, 0x010A
 12c:	70 91 0b 01 	lds	r23, 0x010B
 130:	ce 01       	movw	r24, r28
 132:	0e 94 67 00 	call	0xce	; 0xce <Fnd_Display>
  DDRA = 0xff;
  PORTA = 0xff;

  while (1)
  {
  	for(i = 1 ; i<9 ; i++) {
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	c9 30       	cpi	r28, 0x09	; 9
 13a:	d1 05       	cpc	r29, r1
 13c:	9c f7       	brge	.-26     	; 0x124 <main+0x10>
 13e:	f4 cf       	rjmp	.-24     	; 0x128 <main+0x14>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
