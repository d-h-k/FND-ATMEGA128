
Output:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800112  00800112  00000380  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b3  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002de  00000000  00000000  00000453  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000188  00000000  00000000  00000731  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000367  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000129  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00000db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000e49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_15>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  c6:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initialize_POT>:

/* ================================================================================= */

void initialize_POT(void) {

  DDRA = 0xff;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xff;
  d2:	87 bb       	out	0x17, r24	; 23
  DDRC = 0xff;
  d4:	84 bb       	out	0x14, r24	; 20
  DDRD = 0x0f;
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	81 bb       	out	0x11, r24	; 17
  // DDRB=0x0f; 
  // DDRC=0xff; 
  // DDRD=0xf0; 
  // DDRE=0xff; 
  // DDRF=0x01; 
} 
  da:	08 95       	ret

000000dc <initialize_INT>:

  //EICRA = 0x03;//falling edge interrupt request 

  //sei();//SREG MSBit Set 1 - all interrupt ON 

} 
  dc:	08 95       	ret

000000de <initialize_TIM>:
  

/* ================================================================================= */  

void initialize_TIM(void) { 
  cli();
  de:	f8 94       	cli
  TCCR0 |= (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
  e0:	83 b7       	in	r24, 0x33	; 51
  e2:	8c 60       	ori	r24, 0x0C	; 12
  e4:	83 bf       	out	0x33, r24	; 51
  TCCR0 &= (0<<WGM00); 
  e6:	83 b7       	in	r24, 0x33	; 51
  e8:	13 be       	out	0x33, r1	; 51
  TCCR0 = 0x0c;//0000 1100
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	83 bf       	out	0x33, r24	; 51
  //TCNT0 = 0x00;
  OCR0 = 249; 
  ee:	89 ef       	ldi	r24, 0xF9	; 249
  f0:	81 bf       	out	0x31, r24	; 49
  TIMSK = 2;
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	87 bf       	out	0x37, r24	; 55
  //TIMSK |= (1<<OCIE0);
  SREG = 0x80;
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	8f bf       	out	0x3f, r24	; 63
  //TIFR = 0x40; 
  //TCNT0 = 0x70;
  //TCCR2 = 0x07;
  //TCNT2 = 0x70;//{(0xff-0x70)+1} * 126 * (1/16Mhz) = 10ms 
  //TIMSK = 2; 
  sei();//enable all interrupts
  fa:	78 94       	sei
  
} 
  fc:	08 95       	ret

000000fe <__vector_15>:

} 

  */

ISR(TIMER0_COMP_vect){ // timer0 Overflow interrupt
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	0b b6       	in	r0, 0x3b	; 59
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
    
	PORTA &= !(0x0f); //캐소드
 112:	8b b3       	in	r24, 0x1b	; 27
 114:	1b ba       	out	0x1b, r1	; 27
	PORTD &= !(0x0f);
 116:	82 b3       	in	r24, 0x12	; 18
 118:	12 ba       	out	0x12, r1	; 18
	
	PORTC = 0x00;
 11a:	15 ba       	out	0x15, r1	; 21
    PORTB = 0x00;
 11c:	18 ba       	out	0x18, r1	; 24
	//PORTA = (0xf0 ^ PORTA);
	//PORTA = (0x30 ^ PORTA);
    
	switch(fnd_dgt){
 11e:	80 91 19 01 	lds	r24, 0x0119
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	e9 f0       	breq	.+58     	; 0x160 <__vector_15+0x62>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	20 f4       	brcc	.+8      	; 0x132 <__vector_15+0x34>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	09 f0       	breq	.+2      	; 0x130 <__vector_15+0x32>
 12e:	4a c0       	rjmp	.+148    	; 0x1c4 <__vector_15+0xc6>
 130:	06 c0       	rjmp	.+12     	; 0x13e <__vector_15+0x40>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	31 f1       	breq	.+76     	; 0x182 <__vector_15+0x84>
 136:	84 30       	cpi	r24, 0x04	; 4
 138:	09 f0       	breq	.+2      	; 0x13c <__vector_15+0x3e>
 13a:	44 c0       	rjmp	.+136    	; 0x1c4 <__vector_15+0xc6>
 13c:	33 c0       	rjmp	.+102    	; 0x1a4 <__vector_15+0xa6>
        //캐소드
        case 1:
		  PORTC=fnd[fnd_buf[1]];
 13e:	e0 91 1b 01 	lds	r30, 0x011B
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e0 50       	subi	r30, 0x00	; 0
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	80 81       	ld	r24, Z
 14a:	85 bb       	out	0x15, r24	; 21
		  PORTB=fnd[fnd_buf[5]];
 14c:	e0 91 1f 01 	lds	r30, 0x011F
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e0 50       	subi	r30, 0x00	; 0
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	80 81       	ld	r24, Z
 158:	88 bb       	out	0x18, r24	; 24
		  PORTA |= (0x01<<0);
 15a:	d8 9a       	sbi	0x1b, 0	; 27
		  PORTD |= (0x01<<0);
 15c:	90 9a       	sbi	0x12, 0	; 18
 15e:	32 c0       	rjmp	.+100    	; 0x1c4 <__vector_15+0xc6>
		  break;
        case 2: 
		  PORTC=fnd[fnd_buf[2]];
 160:	e0 91 1c 01 	lds	r30, 0x011C
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e0 50       	subi	r30, 0x00	; 0
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	85 bb       	out	0x15, r24	; 21
		  PORTB=fnd[fnd_buf[6]];
 16e:	e0 91 20 01 	lds	r30, 0x0120
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	e0 50       	subi	r30, 0x00	; 0
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	80 81       	ld	r24, Z
 17a:	88 bb       	out	0x18, r24	; 24
		  PORTA |= (0x01<<1);
 17c:	d9 9a       	sbi	0x1b, 1	; 27
		  PORTD |= (0x01<<1);
 17e:	91 9a       	sbi	0x12, 1	; 18
 180:	21 c0       	rjmp	.+66     	; 0x1c4 <__vector_15+0xc6>
		  break;
        case 3: 
		  PORTC=fnd[fnd_buf[3]];
 182:	e0 91 1d 01 	lds	r30, 0x011D
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	e0 50       	subi	r30, 0x00	; 0
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	80 81       	ld	r24, Z
 18e:	85 bb       	out	0x15, r24	; 21
		  PORTB=fnd[fnd_buf[7]];
 190:	e0 91 21 01 	lds	r30, 0x0121
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	e0 50       	subi	r30, 0x00	; 0
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	80 81       	ld	r24, Z
 19c:	88 bb       	out	0x18, r24	; 24
		  //PORTA &= (0x01<<1);		
		  PORTA |= (0x01<<2);
 19e:	da 9a       	sbi	0x1b, 2	; 27
		  PORTD |= (0x01<<2);
 1a0:	92 9a       	sbi	0x12, 2	; 18
 1a2:	10 c0       	rjmp	.+32     	; 0x1c4 <__vector_15+0xc6>
	      break;
        case 4: 
		  PORTC=fnd[fnd_buf[4]];
 1a4:	e0 91 1e 01 	lds	r30, 0x011E
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	e0 50       	subi	r30, 0x00	; 0
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	80 81       	ld	r24, Z
 1b0:	85 bb       	out	0x15, r24	; 21
		  PORTB=fnd[fnd_buf[8]];
 1b2:	e0 91 22 01 	lds	r30, 0x0122
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	e0 50       	subi	r30, 0x00	; 0
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	80 81       	ld	r24, Z
 1be:	88 bb       	out	0x18, r24	; 24
		  //PORTA &= (0x01<<2);
		  PORTA |= (0x01<<3);
 1c0:	db 9a       	sbi	0x1b, 3	; 27
		  PORTD |= (0x01<<3);
 1c2:	93 9a       	sbi	0x12, 3	; 18
		  break;
		default : 
		  break;
    }

	if(++fnd_dgt>4) fnd_dgt=1;
 1c4:	80 91 19 01 	lds	r24, 0x0119
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 19 01 	sts	0x0119, r24
 1ce:	80 91 19 01 	lds	r24, 0x0119
 1d2:	85 30       	cpi	r24, 0x05	; 5
 1d4:	18 f0       	brcs	.+6      	; 0x1dc <__vector_15+0xde>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 19 01 	sts	0x0119, r24

}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0b be       	out	0x3b, r0	; 59
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <swread>:

char swread() {
	static unsigned char i=0;
	for( i=4 ; i<8 ; i++ )    
 1f0:	84 e0       	ldi	r24, 0x04	; 4
 1f2:	80 93 23 01 	sts	0x0123, r24
 1f6:	44 e0       	ldi	r20, 0x04	; 4
			 return i;
		   }
        }
        else {
		  if(0 == PushFlg[i]) {
		    PushFlg[i] = 1;
 1f8:	51 e0       	ldi	r21, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1fa:	60 e4       	ldi	r22, 0x40	; 64
 1fc:	7c e9       	ldi	r23, 0x9C	; 156
 1fe:	25 c0       	rjmp	.+74     	; 0x24a <swread+0x5a>
}

char swread() {
	static unsigned char i=0;
	for( i=4 ; i<8 ; i++ )    
		if (PIND & (1<<i)) {
 200:	80 b3       	in	r24, 0x10	; 16
 202:	24 2f       	mov	r18, r20
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	04 2e       	mov	r0, r20
 20a:	02 c0       	rjmp	.+4      	; 0x210 <swread+0x20>
 20c:	95 95       	asr	r25
 20e:	87 95       	ror	r24
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <swread+0x1c>
 214:	f9 01       	movw	r30, r18
 216:	ee 5e       	subi	r30, 0xEE	; 238
 218:	fe 4f       	sbci	r31, 0xFE	; 254
 21a:	80 ff       	sbrs	r24, 0
 21c:	0e c0       	rjmp	.+28     	; 0x23a <swread+0x4a>
		   if(1==PushFlg[i]) {
 21e:	80 81       	ld	r24, Z
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	91 f4       	brne	.+36     	; 0x248 <swread+0x58>
 224:	40 93 23 01 	sts	0x0123, r20
		     PushFlg[i] = 0;
 228:	10 82       	st	Z, r1
			 PORTA = 0x80^PORTA;
 22a:	8b b3       	in	r24, 0x1b	; 27
 22c:	80 58       	subi	r24, 0x80	; 128
 22e:	8b bb       	out	0x1b, r24	; 27
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	9c e9       	ldi	r25, 0x9C	; 156
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <swread+0x44>
 238:	0d c0       	rjmp	.+26     	; 0x254 <swread+0x64>
			 //PORTA &= ~(1<<i);
			 return i;
		   }
        }
        else {
		  if(0 == PushFlg[i]) {
 23a:	80 81       	ld	r24, Z
 23c:	88 23       	and	r24, r24
 23e:	21 f4       	brne	.+8      	; 0x248 <swread+0x58>
		    PushFlg[i] = 1;
 240:	50 83       	st	Z, r21
 242:	cb 01       	movw	r24, r22
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <swread+0x54>
 248:	4f 5f       	subi	r20, 0xFF	; 255

}

char swread() {
	static unsigned char i=0;
	for( i=4 ; i<8 ; i++ )    
 24a:	48 30       	cpi	r20, 0x08	; 8
 24c:	c8 f2       	brcs	.-78     	; 0x200 <swread+0x10>
 24e:	40 93 23 01 	sts	0x0123, r20
 252:	4f ef       	ldi	r20, 0xFF	; 255
            //PORTA |= (1<<i);
		  }	
        }

return -1;
}
 254:	84 2f       	mov	r24, r20
 256:	08 95       	ret

00000258 <main>:

 

int main(void)

{ 
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29

/* ================================================================================= */

void initialize_POT(void) {

  DDRA = 0xff;
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xff;
 260:	87 bb       	out	0x17, r24	; 23
  DDRC = 0xff;
 262:	84 bb       	out	0x14, r24	; 20
  DDRD = 0x0f;
 264:	8f e0       	ldi	r24, 0x0F	; 15
 266:	81 bb       	out	0x11, r24	; 17
int main(void)

{ 
  initialize_POT(); 
  //initialize_INT(); 
  initialize_TIM();    
 268:	0e 94 6f 00 	call	0xde	; 0xde <initialize_TIM>
  fnd_buf[1] = 1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 1b 01 	sts	0x011B, r24
  fnd_buf[2] = 2;	
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 1c 01 	sts	0x011C, r24
  fnd_buf[3] = 3;
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	80 93 1d 01 	sts	0x011D, r24
  fnd_buf[4] = 4;
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	80 93 1e 01 	sts	0x011E, r24
  fnd_buf[5] = 5;
 284:	85 e0       	ldi	r24, 0x05	; 5
 286:	80 93 1f 01 	sts	0x011F, r24
  fnd_buf[6] = 6;
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	80 93 20 01 	sts	0x0120, r24
  fnd_buf[7] = 7;
 290:	87 e0       	ldi	r24, 0x07	; 7
 292:	80 93 21 01 	sts	0x0121, r24
  fnd_buf[8] = 8;
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	80 93 22 01 	sts	0x0122, r24
 29c:	28 e8       	ldi	r18, 0x88	; 136
 29e:	33 e1       	ldi	r19, 0x13	; 19
 2a0:	c0 e9       	ldi	r28, 0x90	; 144
 2a2:	d1 e0       	ldi	r29, 0x01	; 1
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <main+0x58>
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b0:	21 15       	cp	r18, r1
 2b2:	31 05       	cpc	r19, r1
 2b4:	c1 f7       	brne	.-16     	; 0x2a6 <main+0x4e>

  do {
  	_delay_ms(500);
	swread();
 2b6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <swread>
	fnd_buf[1]++;
 2ba:	80 91 1b 01 	lds	r24, 0x011B
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 1b 01 	sts	0x011B, r24
	if(fnd_buf[1]>15) {
 2c4:	80 91 1b 01 	lds	r24, 0x011B
 2c8:	80 31       	cpi	r24, 0x10	; 16
 2ca:	10 f0       	brcs	.+4      	; 0x2d0 <main+0x78>
	  fnd_buf[1]=0;
 2cc:	10 92 1b 01 	sts	0x011B, r1
 2d0:	28 e8       	ldi	r18, 0x88	; 136
 2d2:	33 e1       	ldi	r19, 0x13	; 19
 2d4:	e8 cf       	rjmp	.-48     	; 0x2a6 <main+0x4e>

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
