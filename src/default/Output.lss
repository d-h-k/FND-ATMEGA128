
Output:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000001e0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000055  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000030c  00000000  00000000  000002e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b0  00000000  00000000  000005f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000270  00000000  00000000  000007a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f3  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000158  00000000  00000000  00000b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  00000caf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
void seg1(int digit, int num);
void seg2(int digit, int num);
void Fnd_Display(int digit, int num); //FND Display ÇÔ¼ö

int main(void)
{
  be:	bf 92       	push	r11
  c0:	cf 92       	push	r12
  c2:	df 92       	push	r13
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  int i=0,j=0,num;
  DDRA = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xff;
  d4:	87 bb       	out	0x17, r24	; 23
  DDRC = 0xff;
  d6:	84 bb       	out	0x14, r24	; 20
  DDRD = 0x0f;
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	81 bb       	out	0x11, r24	; 17
  
  
  do {

    PORTA = 0x0f;
  dc:	3f e0       	ldi	r19, 0x0F	; 15
    PORTD = 0x0f;	
  	for(i = 0 ; i<16 ; i++) {
      PORTC = fnd[i];
	  PORTB = fnd[i];
      PORTA = (0xf0 ^ PORTA);
  de:	20 ef       	ldi	r18, 0xF0	; 240
  e0:	b2 2e       	mov	r11, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e2:	90 e9       	ldi	r25, 0x90	; 144
  e4:	c9 2e       	mov	r12, r25
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	d9 2e       	mov	r13, r25
      _delay_ms(1000);
	}

    for(j=0 ; j<725 ; j++) {
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	e8 2e       	mov	r14, r24
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	f8 2e       	mov	r15, r24
  PORTC = fnd[num];
}

void seg1(int digit, int num) {
  int fnd_sel = 0x08;
  PORTD = fnd_sel>>(digit-1);
  f2:	08 e0       	ldi	r16, 0x08	; 8
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	c0 ea       	ldi	r28, 0xA0	; 160
  f8:	df e0       	ldi	r29, 0x0F	; 15
  DDRD = 0x0f;
  
  
  do {

    PORTA = 0x0f;
  fa:	3b bb       	out	0x1b, r19	; 27
    PORTD = 0x0f;	
  fc:	32 bb       	out	0x12, r19	; 18
  fe:	aa e0       	ldi	r26, 0x0A	; 10
 100:	b1 e0       	ldi	r27, 0x01	; 1
  	for(i = 0 ; i<16 ; i++) {
      PORTC = fnd[i];
 102:	8c 91       	ld	r24, X
 104:	85 bb       	out	0x15, r24	; 21
	  PORTB = fnd[i];
 106:	88 bb       	out	0x18, r24	; 24
      PORTA = (0xf0 ^ PORTA);
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	8b 25       	eor	r24, r11
 10c:	8b bb       	out	0x1b, r24	; 27
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	97 e2       	ldi	r25, 0x27	; 39
 112:	f6 01       	movw	r30, r12
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x56>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11a:	d9 f7       	brne	.-10     	; 0x112 <main+0x54>
 11c:	11 96       	adiw	r26, 0x01	; 1
  
  do {

    PORTA = 0x0f;
    PORTD = 0x0f;	
  	for(i = 0 ; i<16 ; i++) {
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	aa 31       	cpi	r26, 0x1A	; 26
 122:	b8 07       	cpc	r27, r24
 124:	71 f7       	brne	.-36     	; 0x102 <main+0x44>
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	1b c0       	rjmp	.+54     	; 0x162 <main+0xa4>
  PORTC = fnd[num];
}

void seg1(int digit, int num) {
  int fnd_sel = 0x08;
  PORTD = fnd_sel>>(digit-1);
 12c:	c8 01       	movw	r24, r16
 12e:	04 2e       	mov	r0, r20
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0x78>
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <main+0x74>
 13a:	82 bb       	out	0x12, r24	; 18
  PORTB = fnd[num];
 13c:	24 81       	ldd	r18, Z+4	; 0x04
 13e:	28 bb       	out	0x18, r18	; 24
  }while (1);
}

void seg2(int digit, int num) {
  int fnd_sel = 0x08;
  PORTA = fnd_sel>>(digit-1);
 140:	8b bb       	out	0x1b, r24	; 27
  PORTC = fnd[num];
 142:	81 91       	ld	r24, Z+
 144:	85 bb       	out	0x15, r24	; 21
 146:	ce 01       	movw	r24, r28
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0x8a>
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
      PORTA = (0xf0 ^ PORTA);
      _delay_ms(1000);
	}

    for(j=0 ; j<725 ; j++) {
      for(i=1 ; i<=4 ; i++) {
 150:	44 30       	cpi	r20, 0x04	; 4
 152:	51 05       	cpc	r21, r1
 154:	59 f7       	brne	.-42     	; 0x12c <main+0x6e>
	  PORTB = fnd[i];
      PORTA = (0xf0 ^ PORTA);
      _delay_ms(1000);
	}

    for(j=0 ; j<725 ; j++) {
 156:	6f 5f       	subi	r22, 0xFF	; 255
 158:	7f 4f       	sbci	r23, 0xFF	; 255
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	65 3d       	cpi	r22, 0xD5	; 213
 15e:	78 07       	cpc	r23, r24
 160:	61 f2       	breq	.-104    	; 0xfa <main+0x3c>
 162:	f7 01       	movw	r30, r14
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	e1 cf       	rjmp	.-62     	; 0x12c <main+0x6e>

0000016a <seg2>:
	 
	
  }while (1);
}

void seg2(int digit, int num) {
 16a:	fb 01       	movw	r30, r22
  int fnd_sel = 0x08;
  PORTA = fnd_sel>>(digit-1);
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	28 e0       	ldi	r18, 0x08	; 8
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <seg2+0xe>
 174:	35 95       	asr	r19
 176:	27 95       	ror	r18
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <seg2+0xa>
 17c:	2b bb       	out	0x1b, r18	; 27
  PORTC = fnd[num];
 17e:	e6 5f       	subi	r30, 0xF6	; 246
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	80 81       	ld	r24, Z
 184:	85 bb       	out	0x15, r24	; 21
}
 186:	08 95       	ret

00000188 <seg1>:

void seg1(int digit, int num) {
 188:	fb 01       	movw	r30, r22
  int fnd_sel = 0x08;
  PORTD = fnd_sel>>(digit-1);
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	28 e0       	ldi	r18, 0x08	; 8
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <seg1+0xe>
 192:	35 95       	asr	r19
 194:	27 95       	ror	r18
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <seg1+0xa>
 19a:	22 bb       	out	0x12, r18	; 18
  PORTB = fnd[num];
 19c:	e6 5f       	subi	r30, 0xF6	; 246
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	80 81       	ld	r24, Z
 1a2:	88 bb       	out	0x18, r24	; 24
}
 1a4:	08 95       	ret

000001a6 <Fnd_Display>:

void Fnd_Display(int digit, int num) {
 1a6:	fb 01       	movw	r30, r22
  //int fnd_sel = 0x00;
  if(digit == 1) {
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	91 05       	cpc	r25, r1
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <Fnd_Display+0xc>
    PORTD = 0x08;
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	0d c0       	rjmp	.+26     	; 0x1cc <Fnd_Display+0x26>
  }
  else if(digit == 2) {
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	91 05       	cpc	r25, r1
 1b6:	11 f4       	brne	.+4      	; 0x1bc <Fnd_Display+0x16>
    PORTD = 0x04;
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	08 c0       	rjmp	.+16     	; 0x1cc <Fnd_Display+0x26>
  }
  else if(digit == 3) {
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	91 05       	cpc	r25, r1
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <Fnd_Display+0x20>
    PORTD = 0x02;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <Fnd_Display+0x26>
  }
  else if(digit == 4) {
 1c6:	04 97       	sbiw	r24, 0x04	; 4
 1c8:	11 f4       	brne	.+4      	; 0x1ce <Fnd_Display+0x28>
    PORTD = 0x01;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	82 bb       	out	0x12, r24	; 18
  }
  PORTD = 0xff;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	82 bb       	out	0x12, r24	; 18
  PORTB = fnd[num];
 1d2:	e6 5f       	subi	r30, 0xF6	; 246
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	80 81       	ld	r24, Z
 1d8:	88 bb       	out	0x18, r24	; 24
}
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
