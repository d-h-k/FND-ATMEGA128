
Output:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000025e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800128  00800128  0000031a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000128  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000487  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e8  00000000  00000000  000008e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000341  00000000  00000000  00000ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000159  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000158  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 32       	cpi	r26, 0x2A	; 42
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  c6:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <seg2>:
	//
    testseq();  
  }while (1);
}

void seg2(int digit, int num) {
  ce:	fb 01       	movw	r30, r22
  int fnd_sel = 0x08;
  PORTA = fnd_sel>>(digit-1);
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	28 e0       	ldi	r18, 0x08	; 8
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <seg2+0xe>
  d8:	35 95       	asr	r19
  da:	27 95       	ror	r18
  dc:	8a 95       	dec	r24
  de:	e2 f7       	brpl	.-8      	; 0xd8 <seg2+0xa>
  e0:	2b bb       	out	0x1b, r18	; 27
  PORTC = fnd[num];
  e2:	e6 5f       	subi	r30, 0xF6	; 246
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	80 81       	ld	r24, Z
  e8:	85 bb       	out	0x15, r24	; 21
}
  ea:	08 95       	ret

000000ec <seg1>:

void seg1(int digit, int num) {
  ec:	fb 01       	movw	r30, r22
  int fnd_sel = 0x08;
  PORTD = fnd_sel>>(digit-1);
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	28 e0       	ldi	r18, 0x08	; 8
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <seg1+0xe>
  f6:	35 95       	asr	r19
  f8:	27 95       	ror	r18
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <seg1+0xa>
  fe:	22 bb       	out	0x12, r18	; 18
  PORTB = fnd[num];
 100:	e6 5f       	subi	r30, 0xF6	; 246
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	80 81       	ld	r24, Z
 106:	88 bb       	out	0x18, r24	; 24
}
 108:	08 95       	ret

0000010a <Fnd_Display>:

void Fnd_Display(int digit, int num) {
 10a:	fb 01       	movw	r30, r22
  //int fnd_sel = 0x00;
  if(digit == 1) {
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	11 f4       	brne	.+4      	; 0x116 <Fnd_Display+0xc>
    PORTD = 0x08;
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	0d c0       	rjmp	.+26     	; 0x130 <Fnd_Display+0x26>
  }
  else if(digit == 2) {
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	91 05       	cpc	r25, r1
 11a:	11 f4       	brne	.+4      	; 0x120 <Fnd_Display+0x16>
    PORTD = 0x04;
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	08 c0       	rjmp	.+16     	; 0x130 <Fnd_Display+0x26>
  }
  else if(digit == 3) {
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	91 05       	cpc	r25, r1
 124:	11 f4       	brne	.+4      	; 0x12a <Fnd_Display+0x20>
    PORTD = 0x02;
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	03 c0       	rjmp	.+6      	; 0x130 <Fnd_Display+0x26>
  }
  else if(digit == 4) {
 12a:	04 97       	sbiw	r24, 0x04	; 4
 12c:	11 f4       	brne	.+4      	; 0x132 <Fnd_Display+0x28>
    PORTD = 0x01;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	82 bb       	out	0x12, r24	; 18
  }
  PORTD = 0xff;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	82 bb       	out	0x12, r24	; 18
  PORTB = fnd[num];
 136:	e6 5f       	subi	r30, 0xF6	; 246
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	80 81       	ld	r24, Z
 13c:	88 bb       	out	0x18, r24	; 24
}
 13e:	08 95       	ret

00000140 <testseq>:

void testseq(void) {
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
  int i=0,j=0,num=0;
  PORTA = 0x0f;
 144:	8f e0       	ldi	r24, 0x0F	; 15
 146:	8b bb       	out	0x1b, r24	; 27
  PORTD = 0x0f;	
 148:	82 bb       	out	0x12, r24	; 18
 14a:	aa e0       	ldi	r26, 0x0A	; 10
 14c:	b1 e0       	ldi	r27, 0x01	; 1
  for(i = 0 ; i<16 ; i++) {
    PORTC = fnd[i];
	PORTB = fnd[i];
    PORTA = (0xf0 ^ PORTA);
 14e:	40 ef       	ldi	r20, 0xF0	; 240
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 150:	20 e9       	ldi	r18, 0x90	; 144
 152:	31 e0       	ldi	r19, 0x01	; 1
void testseq(void) {
  int i=0,j=0,num=0;
  PORTA = 0x0f;
  PORTD = 0x0f;	
  for(i = 0 ; i<16 ; i++) {
    PORTC = fnd[i];
 154:	8c 91       	ld	r24, X
 156:	85 bb       	out	0x15, r24	; 21
	PORTB = fnd[i];
 158:	88 bb       	out	0x18, r24	; 24
    PORTA = (0xf0 ^ PORTA);
 15a:	8b b3       	in	r24, 0x1b	; 27
 15c:	84 27       	eor	r24, r20
 15e:	8b bb       	out	0x1b, r24	; 27
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	97 e2       	ldi	r25, 0x27	; 39
 164:	f9 01       	movw	r30, r18
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <testseq+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16c:	d9 f7       	brne	.-10     	; 0x164 <testseq+0x24>
 16e:	11 96       	adiw	r26, 0x01	; 1

void testseq(void) {
  int i=0,j=0,num=0;
  PORTA = 0x0f;
  PORTD = 0x0f;	
  for(i = 0 ; i<16 ; i++) {
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	aa 31       	cpi	r26, 0x1A	; 26
 174:	b8 07       	cpc	r27, r24
 176:	71 f7       	brne	.-36     	; 0x154 <testseq+0x14>
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	70 e0       	ldi	r23, 0x00	; 0
  PORTC = fnd[num];
}

void seg1(int digit, int num) {
  int fnd_sel = 0x08;
  PORTD = fnd_sel>>(digit-1);
 17c:	c8 e0       	ldi	r28, 0x08	; 8
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	a0 ea       	ldi	r26, 0xA0	; 160
 182:	bf e0       	ldi	r27, 0x0F	; 15
 184:	1b c0       	rjmp	.+54     	; 0x1bc <testseq+0x7c>
 186:	ce 01       	movw	r24, r28
 188:	04 2e       	mov	r0, r20
 18a:	02 c0       	rjmp	.+4      	; 0x190 <testseq+0x50>
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <testseq+0x4c>
 194:	82 bb       	out	0x12, r24	; 18
  PORTB = fnd[num];
 196:	24 81       	ldd	r18, Z+4	; 0x04
 198:	28 bb       	out	0x18, r18	; 24
  }while (1);
}

void seg2(int digit, int num) {
  int fnd_sel = 0x08;
  PORTA = fnd_sel>>(digit-1);
 19a:	8b bb       	out	0x1b, r24	; 27
  PORTC = fnd[num];
 19c:	81 91       	ld	r24, Z+
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	cd 01       	movw	r24, r26
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <testseq+0x62>
 1a6:	4f 5f       	subi	r20, 0xFF	; 255
 1a8:	5f 4f       	sbci	r21, 0xFF	; 255
    PORTA = (0xf0 ^ PORTA);
    _delay_ms(1000);
  }
  
  for(j=0 ; j<725 ; j++) {
    for(i=1 ; i<=4 ; i++) {
 1aa:	44 30       	cpi	r20, 0x04	; 4
 1ac:	51 05       	cpc	r21, r1
 1ae:	59 f7       	brne	.-42     	; 0x186 <testseq+0x46>
	PORTB = fnd[i];
    PORTA = (0xf0 ^ PORTA);
    _delay_ms(1000);
  }
  
  for(j=0 ; j<725 ; j++) {
 1b0:	6f 5f       	subi	r22, 0xFF	; 255
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	65 3d       	cpi	r22, 0xD5	; 213
 1b8:	78 07       	cpc	r23, r24
 1ba:	29 f0       	breq	.+10     	; 0x1c6 <testseq+0x86>
 1bc:	eb e0       	ldi	r30, 0x0B	; 11
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	e0 cf       	rjmp	.-64     	; 0x186 <testseq+0x46>
	  seg2(i,num+i);
	  _delay_ms(dt);
	 }
   }
	
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <main>:
} 
  
  
/* ================================================================================= */
void initialize_POT(void) {
  DDRA = 0xff;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xff;
 1d0:	87 bb       	out	0x17, r24	; 23
  DDRC = 0xff;
 1d2:	84 bb       	out	0x14, r24	; 20
  DDRD = 0x0f;
 1d4:	8f e0       	ldi	r24, 0x0F	; 15
 1d6:	81 bb       	out	0x11, r24	; 17
  
  do {
    //

	//
    testseq();  
 1d8:	0e 94 a0 00 	call	0x140	; 0x140 <testseq>
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <main+0xc>

000001de <initialize_INT>:
}

/* ================================================================================= */
void initialize_INT(void) { 
  //Needs to be modiy//EIMSK = 0x03;
  EICRA = 0x03;//falling edge interrupt request 
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	80 93 6a 00 	sts	0x006A, r24
  sei();//SREG MSBit Set 1 - all interrupt ON 
 1e4:	78 94       	sei
} 
 1e6:	08 95       	ret

000001e8 <initialize_POT>:
  
  
/* ================================================================================= */
void initialize_POT(void) {
  DDRA = 0xff;
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xff;
 1ec:	87 bb       	out	0x17, r24	; 23
  DDRC = 0xff;
 1ee:	84 bb       	out	0x14, r24	; 20
  DDRD = 0x0f;
 1f0:	8f e0       	ldi	r24, 0x0F	; 15
 1f2:	81 bb       	out	0x11, r24	; 17
  // DDRB=0x0f; 
  // DDRC=0xff; 
  // DDRD=0xf0; 
  // DDRE=0xff; 
  // DDRF=0x01; 
} 
 1f4:	08 95       	ret

000001f6 <initialize_TIM>:

/* ================================================================================= */  
void initialize_TIM(void) { 
  TCCR0 = 0x07; 
 1f6:	97 e0       	ldi	r25, 0x07	; 7
 1f8:	93 bf       	out	0x33, r25	; 51
  TCNT0 = 0x70;//{(0xff-0x70)+1} * 126 * (1/16Mhz) = 10ms 
 1fa:	80 e7       	ldi	r24, 0x70	; 112
 1fc:	82 bf       	out	0x32, r24	; 50
  TCCR2 = 0x07; 
 1fe:	95 bd       	out	0x25, r25	; 37
  TCNT2 = 0x70;//{(0xff-0x70)+1} * 126 * (1/16Mhz) = 10ms 
 200:	84 bd       	out	0x24, r24	; 36
  TIMSK = 0x41; 
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	87 bf       	out	0x37, r24	; 55
  TIFR = 0x40; 
 206:	80 e4       	ldi	r24, 0x40	; 64
 208:	86 bf       	out	0x36, r24	; 54
  sei();//enable all interrupts 
 20a:	78 94       	sei
} 
 20c:	08 95       	ret

0000020e <__vector_16>:
  
/* timer0 ================================================================================= */
SIGNAL(SIG_OVERFLOW0)//timer0 Overflow interrupt 
{ 
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	8f 93       	push	r24
  interrupt_count--; ms++; 
 21a:	80 91 26 01 	lds	r24, 0x0126
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	80 93 26 01 	sts	0x0126, r24
 224:	80 91 28 01 	lds	r24, 0x0128
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 28 01 	sts	0x0128, r24
    if(!interrupt_count){//10ms * 100 = 1000ms delay = 1s 
 22e:	80 91 26 01 	lds	r24, 0x0126
 232:	88 23       	and	r24, r24
 234:	51 f4       	brne	.+20     	; 0x24a <__vector_16+0x3c>
        interrupt_count = 100; ss++; ms=0; 
 236:	84 e6       	ldi	r24, 0x64	; 100
 238:	80 93 26 01 	sts	0x0126, r24
 23c:	80 91 1e 01 	lds	r24, 0x011E
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	80 93 1e 01 	sts	0x011E, r24
 246:	10 92 28 01 	sts	0x0128, r1
    } 
  TCNT0 = 0x70; 
 24a:	80 e7       	ldi	r24, 0x70	; 112
 24c:	82 bf       	out	0x32, r24	; 50
} 
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
